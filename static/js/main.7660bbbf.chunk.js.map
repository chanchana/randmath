{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","numbers","setNumbers","restNumber","setResultNumber","AppBar","position","Toolbar","Typography","variant","color","Container","maxWidth","Grid","container","direction","justify","alignItems","map","number","item","xs","Button","onClick","newNumbers","i","push","Math","floor","random","newResultNumber","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qSAsDeA,MArCf,WACE,IADa,EAEiBC,mBAAS,CAAC,EAAG,EAAG,EAAG,EAAG,IAFvC,mBAENC,EAFM,KAEGC,EAFH,OAGyBF,mBAAS,GAHlC,mBAGNG,EAHM,KAGMC,EAHN,KAeb,OACE,oCAzBF,kBAACC,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,QAAQ,QAAQC,MAAM,WAAlC,gBAyBA,kBAACC,EAAA,EAAD,CAAWC,SAAS,MAClB,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,MAAMC,QAAQ,eAAeC,WAAW,UAC/DhB,EAAQiB,KAAI,SAAAC,GAAM,OACjB,kBAACN,EAAA,EAAD,CAAMC,WAAS,EAACM,MAAI,EAACC,GAAI,GACvB,4BAAKF,QAIX,kBAACN,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,SAASC,QAAQ,SAASC,WAAW,UAC7D,4BAAKd,GACL,kBAACmB,EAAA,EAAD,CAAQb,QAAQ,YAAYC,MAAM,UAAUa,QAvBjC,WAEnB,IADA,IAAIC,EAAa,GACRC,EAAI,EAAGA,EANI,EAMeA,IACjCD,EAAWE,KAAKC,KAAKC,MAAsB,GAAhBD,KAAKE,WAElC,IAAIC,EAAkBH,KAAKC,MAAsB,IAAhBD,KAAKE,UACtC3B,EAAWsB,GACXpB,EAAgB0B,KAgBR,WCjCQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7660bbbf.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\nimport {Grid, Container, Button} from '@material-ui/core'\nimport './App.css';\n\nconst NavBar = () => (\n  <AppBar position=\"static\">\n    <Toolbar>\n        <Typography variant=\"title\" color=\"inherit\">\n          Rand Math!\n        </Typography>\n    </Toolbar>\n  </AppBar>\n)\n\nfunction App() {\n  const numbersLength = 5\n  const [numbers, setNumbers] = useState([0, 0, 0, 0, 0])\n  const [restNumber, setResultNumber] = useState(0)\n\n  const actionRandom = () => {\n    let newNumbers = []\n    for (let i = 0; i < numbersLength; i++) {\n      newNumbers.push(Math.floor(Math.random() * 10))\n    }\n    let newResultNumber = Math.floor(Math.random() * 100)\n    setNumbers(newNumbers)\n    setResultNumber(newResultNumber)\n  }\n\n  return (\n    <>\n      {NavBar()}\n        <Container maxWidth=\"sm\">\n          <Grid container direction=\"row\" justify=\"space-around\" alignItems=\"center\">\n            {numbers.map(number => (\n              <Grid container item xs={1}>\n                <h2>{number}</h2>\n              </Grid>\n            ))}\n          </Grid>\n          <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\">\n            <h1>{restNumber}</h1>\n            <Button variant=\"contained\" color=\"primary\" onClick={actionRandom}>New</Button>\n          </Grid>\n\n\n        </Container>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}